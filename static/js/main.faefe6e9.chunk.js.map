{"version":3,"sources":["components/TaskItem.js","components/Task.js","components/TaskList.js","index.js"],"names":["TaskItem","_this","this","_this$props","props","item","itempar","react_default","a","createElement","className","id","contentEditable","suppressContentEditableWarning","ref","onBlur","onUpdate","refs","taskChanges","value","onClick","onRemove","Component","Task","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","func","testfunc","_this2","task","onUpdateItem","onFinished","onDragStart","onRemoveItem","onhandleAddItem","style","backgroundColor","bgcolor","draggable","e","checked","selected","type","onChange","concat","items","map","key","components_TaskItem","isEditing","defaultView","TaskList","tasks","finishedTasks","isSelected","text","fruits","React","createRef","handleChange","bind","assertThisInitialized","handleAdd","handleRemove","handleUpdate","handleFinished","doneClass","handleAddItem","handleUpdateItem","handleRemoveItem","handleDragStart","handleDrop","handleDragOver","_e$target","target","name","setState","defineProperty","colors","max","length","_this$state","newText","charAt","toUpperCase","slice","toLowerCase","invalid","filter","t","alert","console","log","newItem","Date","now","status","Math","round","random","newTask","isClicked","idx","index","indexOf","objectSpread","x","document","getElementById","textContent","toConsumableArray","classes","parentTask","taskx","itemx","itm","loadStateFromLocalStorage","window","addEventListener","saveStateToLocalStorage","removeEventListener","localStorage","hasOwnProperty","getItem","JSON","parse","setItem","stringify","ev","preventDefault","dataTransfer","setData","getData","_this$state2","tasklist","new","finished","wip","forEach","push","components_Task","onAdd","onDoneClass","disabled","onDragOver","onDrop","ReactDOM","render","components_TaskList"],"mappings":"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","file":"static/js/main.faefe6e9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TaskItem extends Component {\n  render() {\n    const { item, itempar } = this.props;\n    return (\n      <div>\n        <span\n          className=\"item m-3\"\n          id={item.id}\n          contentEditable={true}\n          suppressContentEditableWarning={true}\n          ref=\"taskChanges\"\n          onBlur={() =>\n            this.props.onUpdate(this.refs.taskChanges, itempar, item)\n          }\n        >\n          {item.value}\n        </span>\n        <button onClick={() => this.props.onRemove(itempar, item)}>x</button>\n      </div>\n    );\n  }\n}\n\nexport default TaskItem;\n","import React, { Component } from \"react\";\nimport TaskItem from \"./TaskItem\";\n\nclass Task extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      func: props.testfunc\n    };\n  }\n\n  defaultView() {\n    const {\n      task,\n      onRemove,\n      onUpdate,\n      onUpdateItem,\n      onFinished,\n      onDragStart,\n      onRemoveItem,\n      onhandleAddItem\n    } = this.props;\n    return (\n      <div\n        className=\"draggable\"\n        style={{ backgroundColor: task.bgcolor }}\n        id={task.value}\n        draggable\n        onDragStart={e => onDragStart(e, task.value)}\n      >\n        <input\n          checked={task.selected}\n          type=\"checkbox\"\n          onChange={() => onFinished(task)}\n        />\n        <span\n          // className={onDoneClass(task) + \" m-3\"}\n          className={(task.selected ? \"done\" : \"plain\").concat(\" m-3\")}\n          id={task.id}\n          contentEditable={true}\n          suppressContentEditableWarning={true}\n          ref=\"taskChanges\"\n          onBlur={() => onUpdate(this.refs.taskChanges, task)}\n        >\n          {task.value}\n        </span>\n        {/* <button onClick={() => onAdd(task)}>+</button> */}\n        <button onClick={() => onhandleAddItem(task)}>+ Item</button>\n        <button onClick={() => onRemove(task.id)}>x</button>\n\n        <ul>\n          {task.items.map(item => (\n            <li key={item.id}>\n              <TaskItem\n                itempar={this.props.task}\n                item={item}\n                onRemove={onRemoveItem}\n                onUpdate={onUpdateItem}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    const { state } = this.props;\n    if (state.isEditing === true) return this.defaultView();\n    else return this.defaultView();\n  }\n}\n\nexport default Task;\n","import React, { Component } from \"react\";\nimport Task from \"./Task\";\n\nclass TaskList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: [],\n      finishedTasks: [],\n      isSelected: false,\n      text: \"\",\n      fruits: []\n    };\n\n    this.taskChanges = React.createRef();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleFinished = this.handleFinished.bind(this);\n    this.doneClass = this.doneClass.bind(this);\n    this.handleAddItem = this.handleAddItem.bind(this);\n    this.handleUpdateItem = this.handleUpdateItem.bind(this);\n    this.handleRemoveItem = this.handleRemoveItem.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.handleDrop = this.handleDrop.bind(this);\n    this.handleDragOver = this.handleDragOver.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  handleAdd() {\n    const colors = [\n      \"lightyellow\",\n      \"skyblue\",\n      \"lightgray\",\n      \"pink\",\n      \"lightpink\",\n      \"wheat\"\n    ];\n    const max = colors.length - 1;\n    const { tasks, text } = this.state;\n    const newText = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n    const invalid = tasks.filter(t => t.value === newText).length;\n\n    if (invalid !== 0) {\n      alert(`Item \"${text}\" already exists.`);\n    } else if (invalid === 0) {\n      console.log(`${invalid} invalidities.`);\n\n      const newItem = {\n        id: Date.now(),\n        value: newText,\n        status: \"new\",\n        bgcolor: colors[Math.round(Math.random() * (+max - 0))],\n        selected: false,\n        items: []\n      };\n\n      const newTask = tasks.concat(newItem);\n\n      this.setState({\n        tasks: newTask,\n        text: \"\",\n        isClicked: true\n      });\n    }\n  }\n\n  handleRemove(idx) {\n    const tasks = this.state.tasks.filter(task => task.id !== idx);\n    this.setState({ tasks });\n  }\n\n  handleUpdate(taskChanges, task) {\n    const { tasks } = this.state;\n    // const tasks = [...this.state.tasks];\n    const index = tasks.indexOf(task);\n    tasks[index] = { ...task };\n    const x = document.getElementById(taskChanges.id).textContent;\n    tasks[index].value = x; //issue : saves even without setState\n    this.setState({ tasks });\n    console.log(taskChanges);\n  }\n\n  //WORKING FUNCTION OF HANDLEFINISHED\n  handleFinished(task) {\n    const tasks = [...this.state.tasks];\n    const index = tasks.indexOf(task);\n    tasks[index] = { ...task };\n\n    if (tasks[index].selected === false) {\n      tasks[index].selected = true;\n      tasks[index].status = \"finished\";\n      this.setState({\n        tasks\n      });\n    } else if (tasks[index].selected === true) {\n      tasks[index].selected = false;\n      tasks[index].status = \"new\";\n      this.setState({\n        tasks\n      });\n    }\n  }\n\n  doneClass(task) {\n    let classes = \"plain \";\n\n    if (task.selected === true) {\n      classes -= \"plain\";\n      classes = \" done \";\n      return classes;\n    } else if (task.selected === false) {\n      return classes;\n    }\n  }\n\n  handleAddItem(task) {\n    const { tasks } = this.state;\n    const index = tasks.indexOf(task);\n\n    const newItem = {\n      id: Date.now(),\n      value: \"new item\" + (task.items.length + 1)\n    };\n\n    tasks[index] = { ...task, items: task.items.concat(newItem) };\n    this.setState({ tasks });\n  }\n\n  handleUpdateItem(taskChanges, parentTask, item) {\n    const { tasks } = this.state;\n    const taskx = tasks.indexOf(parentTask);\n    const task = { ...parentTask };\n    const itemx = task.items.indexOf(item);\n    task.items[itemx].value = document.getElementById(\n      taskChanges.id\n    ).textContent;\n    tasks[taskx] = { ...task };\n    this.setState({ tasks });\n  }\n\n  handleRemoveItem(parentTask, item) {\n    const { tasks } = this.state;\n    const taskx = tasks.indexOf(parentTask);\n    const task = { ...parentTask };\n    task.items = task.items.filter(itm => itm.id !== item.id);\n    tasks[taskx] = { ...task };\n    this.setState({ tasks });\n  }\n\n  componentDidMount() {\n    // localStorage.clear();\n    this.loadStateFromLocalStorage();\n\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    console.log(\"Did Mounted\");\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    this.saveStateToLocalStorage();\n  }\n\n  loadStateFromLocalStorage() {\n    for (let key in this.state) {\n      if (localStorage.hasOwnProperty(key)) {\n        let value = localStorage.getItem(key);\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    for (let key in this.state) {\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  // DRAG AND DROP\n\n  handleDragOver(ev) {\n    ev.preventDefault();\n    console.log(\"dragged over\");\n  }\n\n  handleDragStart(ev, task) {\n    ev.dataTransfer.setData(\"task\", task);\n\n    console.log(task);\n  }\n\n  handleDrop(ev, status) {\n    ev.preventDefault();\n    let task = ev.dataTransfer.getData(\"task\");\n\n    let tasks = this.state.tasks.filter(t => {\n      if (t.value === task) {\n        t.status = status;\n      }\n      console.log(\"dropped\", task);\n      return t;\n    });\n\n    this.setState({ ...this.state, tasks });\n  }\n\n  render() {\n    const { text, tasks } = this.state;\n    const tasklist = {\n      new: [],\n      finished: [],\n      wip: []\n    };\n\n    tasks.forEach(task => {\n      tasklist[task.status].push(\n        <Task\n          key={task.id}\n          state={this.state}\n          task={task}\n          onRemove={this.handleRemove}\n          onUpdate={this.handleUpdate}\n          onAdd={this.handleAdd}\n          onFinished={this.handleFinished}\n          onDoneClass={this.doneClass}\n          onChange={this.handleChange}\n          onhandleAddItem={this.handleAddItem}\n          onUpdateItem={this.handleUpdateItem}\n          onRemoveItem={this.handleRemoveItem}\n          onDragStart={this.handleDragStart}\n        />\n      );\n    });\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-12 p-5 toolbar\">\n            <input\n              className=\"offset-md-4 w-25\"\n              type=\"text\"\n              name={\"text\"}\n              value={text}\n              onChange={this.handleChange}\n              // onChange={e => this.handleChange(\"text\", e.target.value)}\n            />\n\n            <button onClick={this.handleAdd} disabled={!text.length}>\n              Add Task\n            </button>\n          </div>\n          <div\n            className=\"col-sm-4 new\"\n            onDragOver={e => this.handleDragOver(e)}\n            onDrop={e => this.handleDrop(e, \"new\")}\n          >\n            <h3 className=\"header\">New</h3>\n            {tasklist.new}\n          </div>\n\n          <div\n            className=\"col-sm-4 wip\"\n            onDragOver={e => this.handleDragOver(e)}\n            onDrop={e => this.handleDrop(e, \"wip\")}\n          >\n            <h3 className=\"header\">WIP</h3>\n            {tasklist.wip}\n          </div>\n\n          <div\n            className=\"col-sm-4 finished\"\n            onDragOver={e => this.handleDragOver(e)}\n            onDrop={e => this.handleDrop(e, \"finished\")}\n          >\n            <h3 className=\"header\">Finished</h3>\n            {tasklist.finished}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TaskList;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import \"./testing/test.css\";\nimport TaskList from \"./components/TaskList\";\n// import Testing from \"./testing/Testing\";\n// import \"mdbootstrap/css/bootstrap.css\";\n// import \"mdbootstrap/css/mdb.css\";\n\nReactDOM.render(<TaskList />, document.getElementById(\"root\"));\n"],"sourceRoot":""}